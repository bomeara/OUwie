require(phytools)
?drop.tip.simmap
require(OUwie)
?OUwie
data(tworegime)
#Plot the tree and the internal nodes to highlight the selective regimes:
select.reg<-character(length(tree$node.label))
select.reg[tree$node.label == 1] <- "black"
select.reg[tree$node.label == 2] <- "red"
plot(tree)
nodelabels(pch=21, bg=select.reg)
## Not run:
#To see the first 5 lines of the data matrix to see what how to
#structure the data:
trait[1:5,]
#Now fit an OU model that allows different sigma^2:
OUwie(tree,trait,model=c("OUMV"))
OUwie(tree,trait,model=c("OUMV"), algorithm="three.point", diagn = TRUE)
OUwie(tree,trait,model=c("OUMV"), diagn = TRUE)
res <- OUwie(tree,trait,model=c("OUMV"), diagn = TRUE)
tree$tip.label[1:4]
drop.tip.simmap(tree, tree$tip.label[1:4])
tree
?make.simmap()
require(corhMM)
require(corHMM)
?makeSimmap
tree
trait
MK <- corHMM(tree, trait[,c(1,2)], 1)
MK
simmap <- makeSimmap(tree=tree, data=trait[,c(1,2)], model=model, rate.cat=1, nSim=1, nCores=1)
#Now fit an OU model that allows different sigma^2:
MK <- corHMM(tree, trait[,c(1,2)], 1)
model <- MK$solution
simmap <- makeSimmap(tree=tree, data=trait[,c(1,2)], model=model, rate.cat=1, nSim=1, nCores=1)
simmap
trait
res <- OUwie(simmap[[1]],trait,model=c("OUMV"), simmap.tree = TRUE, diagn = TRUE)
res
drop.tip.simmap(simmap, tree$tip.label[1:4])
drop.tip.simmap(simmap[[1]], tree$tip.label[1:4])
new_map <- drop.tip.simmap(simmap[[1]], tree$tip.label[1:4])
new_trait <- trait[-c(1:4),]
new_trait
new_map
new_res <- OUwie(new_map,new_trait[,c(1,2)], model=c("OUMV"), simmap.tree = TRUE, diagn = TRUE)
new_map <- drop.tip.simmap(simmap[[1]], tree$tip.label[1:4])
new_trait <- trait[-c(1:4),]
new_res <- OUwie(new_map,new_trait[,c(1,2)], model=c("OUMV"), simmap.tree = TRUE, diagn = TRUE)
new_trait[,c(1,2)]
new_map
simmap
new_map
new_trait[,c(1,2)]
new_res <- OUwie(new_map, new_trait[,c(1,2)], model=c("OUMV"), simmap.tree = TRUE, diagn = FALSE)
new_res <- OUwie(new_map, new_trait[,c(1,2)], model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
debug(OUwie)
new_res <- OUwie(new_map, new_trait[,c(1,2)], model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
new_res <- OUwie(new_map, new_trait, model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
undebug(OUwie)
new_res <- OUwie(new_map, new_trait, model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
debug(OUwie)
new_res <- OUwie(new_map, new_trait, model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
length(colnames(phy$mapped.edge))
tot.states
tip.states
data
root.edge.index
root.state
edges
new_res <- OUwie(new_map, new_trait, model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
new_map
branching.times(new_map)
new_map
plot(new_map)
branching.times(new_map)
new_map
new_map$tip.label
new_map$edge.length
new_map$node.label
new_map$node.label <- NULL
branching.times(new_map)
undebug(v)
undebug(OUwie)
new_res <- OUwie(new_map, new_trait, model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
new_res
new_map <- drop.tip.simmap(simmap[[1]], tree$tip.label[1:4])
branching.times(new_map)
new_map$node.label
length(new_map$node.label)
require(phytools)
require(OUwie)
require(corHMM)
data(tworegime)
#Plot the tree and the internal nodes to highlight the selective regimes:
select.reg<-character(length(tree$node.label))
select.reg[tree$node.label == 1] <- "black"
select.reg[tree$node.label == 2] <- "red"
plot(tree)
nodelabels(pch=21, bg=select.reg)
#Now fit an OU model that allows different sigma^2:
MK <- corHMM(tree, trait[,c(1,2)], 1)
model <- MK$solution
simmap <- makeSimmap(tree=tree, data=trait[,c(1,2)], model=model, rate.cat=1, nSim=1, nCores=1)
# no dropped tips, no issue
res <- OUwie(simmap[[1]],trait,model=c("OUMV"), simmap.tree = TRUE, diagn = TRUE)
# now drop tips
new_map <- drop.tip.simmap(simmap[[1]], tree$tip.label[1:4])
new_trait <- trait[-c(1:4),]
# dropped tips, issue arises
new_res <- OUwie(new_map, new_trait, model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
# actually an issue with branching times
branching.times(new_map)
# set nodel labels to null, no issue
new_map$node.label <- NULL
new_res <- OUwie(new_map, new_trait, model=c("OUMV"), simmap.tree = TRUE, algorithm = "three.point")
